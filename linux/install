#!/bin/bash

script_path=`realpath "$0"`
script_dir=`dirname "$script_path"`

slinks=(
#   "$script_dir/binaries/tmux_*:$HOME/.local/bin/tmux"
   "$script_dir/binaries/nvim_*:$HOME/.local/bin/nvim"
   "$script_dir/binaries/fzf_*:$HOME/.local/bin/fzf"
   "$script_dir/binaries/fzf-tmux_*:$HOME/.local/bin/fzf-tmux"
   "$script_dir/configs/tmux.conf:$HOME/.tmux.conf"
   "$script_dir/configs/init.vim:$HOME/.vimrc"
   "$script_dir/configs/init.vim:$HOME/.local/nvim/init.vim"
   "$script_dir/configs/zshrc:$HOME/.local/.zshrc"
   "$script_dir/configs/antigen.zsh:$HOME/.local/.antigen.zsh"
   "$script_dir/configs/zshenv:$HOME/.zshenv"
)

clones=(
   "Vundle.vim:github.com/VundleVim/Vundle.vim:$HOME/.local/.vim/bundle/Vundle.vim"
   "fzf:github.com/junegunn/fzf"
   "z:github.com/rupa/z"
)

split() {
   IFS=$'\n' read -d "" -ra ARR <<< "${1//$2/$'\n'}"
   printf '%s\n' "${ARR[@]}"
}

prepare_colors() {
   if which tput >/dev/null 2>&1; then
      ncolors=$(tput colors)
   fi

   if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
      nor="$(tput sgr0)"
      red="$(tput setaf 1)"
      grn="$(tput setaf 2)"
      yel="$(tput setaf 3)"
      blu="$(tput setaf 4)"
   else
      nor=""
      red=""
      grn=""
      yel=""
      blu=""
   fi
}

make_links() {
   for elem in "${slinks[@]}"; do
      ARR=($(split "$elem" ":"))

      FROM_PATH=${ARR[0]}
      TO_PATH=${ARR[1]}

      [ ! -e "$FROM_PATH" ] && echo -e "$FROM_PATH $red(not exists)$nor" && continue

      [ $force ] && rm -i "$TO_PATH"

      printf '%s ' "$TO_PATH"

      [ -L "$TO_PATH" ] && echo -e "$grn(already done)$nor" && continue
      [ -e "$TO_PATH" ] && echo -e "$red(should be removed first)$nor" && continue

      mkdir -p "$(dirname $TO_PATH)"
      ln -nfs "$FROM_PATH" "$TO_PATH"
      echo -e "${grn}DONE${nor}"
   done
}

make_clones() {
   for elem in "${clones[@]}"; do
      ARR=($(split "$elem" ":"))

      NAME="${ARR[0]}"
      REPO="${ARR[1]}"
      DEST="${ARR[2]:-$HOME/.local/.$NAME}"

      [ $force ] && rm -irf "$DEST"

      [ -e "$DEST" ] && echo -e "${grn}$NAME already installed$nor" && continue

      echo "${yel}Installing \"$NAME\"...$nor"
      git clone --depth=1 https://$REPO $DEST
      echo -e "${grn}DONE${nor}"
   done
}

force=
usage(){
   echo "Usage: $0 [-fzh]"
   echo "  -f force install. Replace existing files"
   echo "  -h show this text"
   exit 1
}

while getopts "fh" opt; do
   case "$opt" in
      f) 
         force=1
         ;;
      h | *) 
         usage
         ;;
   esac
done

prepare_colors
make_links
make_clones
